From eaa40fdf9581388e4414473ed6de38acf1a6791e Mon Sep 17 00:00:00 2001
From: Albert I <krascgq@outlook.co.id>
Date: Mon, 11 Jun 2018 15:07:03 +0800
Subject: [PATCH] isl: Revert all troublesome changes

Break GCC builds with floods of 'was not declared in this scope'
errors. Tested with dynamically linked GNU GCC 7 and 9, and
crosstool-ng compiled statically linked Linaro GCC 7 builds. (ARM64)

* Revert "add isl_map_get_range_simple_fixed_box_hull"
  This reverts commit ad05b8d2.
* Revert "include/isl/set.h: add missing include"
  This reverts commit a996eb8a.
* Revert "isl/id.h: extract out isl/id_type.h"
  This reverts commit f4e35d0e.
* Revert "isl/space.h: extract out isl/space_type.h"
  This reverts commit 406f2e9e.

 Conflicts:
	include/isl/multi.h
	include/isl/point.h
	include/isl/schedule_node.h

Signed-off-by: Albert I <krascgq@outlook.co.id>
---
 Makefile.am                  |   4 -
 doc/user.pod                 |  44 ------
 include/isl/ast.h            |   2 +-
 include/isl/constraint.h     |   2 +-
 include/isl/fixed_box.h      |  34 ----
 include/isl/id.h             |   6 +-
 include/isl/id_to_ast_expr.h |   2 +-
 include/isl/id_to_id.h       |   2 +-
 include/isl/id_to_pw_aff.h   |   2 +-
 include/isl/id_type.h        |  19 ---
 include/isl/local_space.h    |   2 +-
 include/isl/map.h            |   5 +-
 include/isl/multi.h          |   2 +-
 include/isl/point.h          |   2 +-
 include/isl/polynomial.h     |   2 +-
 include/isl/printer.h        |   2 +-
 include/isl/schedule.h       |   2 +-
 include/isl/schedule_node.h  |   2 +-
 include/isl/set.h            |   1 -
 include/isl/space.h          |  16 +-
 include/isl/space_type.h     |  25 ---
 include/isl/union_map.h      |   2 +-
 isl_box.c                    | 368 -------------------------------------------
 isl_space_private.h          |   2 +-
 24 files changed, 33 insertions(+), 517 deletions(-)
 delete mode 100644 include/isl/fixed_box.h
 delete mode 100644 include/isl/id_type.h
 delete mode 100644 include/isl/space_type.h
 delete mode 100644 isl_box.c

diff --git a/Makefile.am b/Makefile.am
index 7c337662..ead6711f 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -84,7 +84,6 @@ libisl_la_SOURCES = \
 	isl_blk.h \
 	isl_bound.c \
 	isl_bound.h \
-	isl_box.c \
 	isl_coalesce.c \
 	isl_constraint.c \
 	isl_constraint_private.h \
@@ -275,10 +274,8 @@ pkginclude_HEADERS = \
 	include/isl/ast_build.h \
 	include/isl/constraint.h \
 	include/isl/ctx.h \
-	include/isl/fixed_box.h \
 	include/isl/flow.h \
 	include/isl/id.h \
-	include/isl/id_type.h \
 	include/isl/id_to_ast_expr.h \
 	include/isl/id_to_id.h \
 	include/isl/id_to_pw_aff.h \
@@ -313,7 +310,6 @@ pkginclude_HEADERS = \
 	include/isl/set.h \
 	include/isl/set_type.h \
 	include/isl/space.h \
-	include/isl/space_type.h \
 	include/isl/stream.h \
 	include/isl/stride_info.h \
 	include/isl/union_map.h \
diff --git a/doc/user.pod b/doc/user.pod
index 00fe4cf2..e164aa5d 100644
--- a/doc/user.pod
+++ b/doc/user.pod
@@ -611,10 +611,6 @@ in which the object was created.
 	isl_ctx *isl_stride_info_get_ctx(
 		__isl_keep isl_stride_info *si);
 
-	#include <isl/fixed_box.h>
-	isl_ctx *isl_fixed_box_get_ctx(
-		__isl_keep isl_fixed_box *box);
-
 =head2 Return Types
 
 C<isl> uses two special return types for functions that either return
@@ -1120,10 +1116,6 @@ of the original object.
 	__isl_give isl_space *isl_point_get_space(
 		__isl_keep isl_point *pnt);
 
-	#include <isl/fixed_box.h>
-	__isl_give isl_space *isl_fixed_box_get_space(
-		__isl_keep isl_fixed_box *box);
-
 The number of dimensions of a given type of space
 may be read off from a space or an object that lives
 in a space using the following functions.
@@ -5256,42 +5248,6 @@ that contains the whole input set or relation.
 In case of union sets and relations, the polyhedral hull is computed
 per space.
 
-=item * Box hull
-
-	#include <isl/map.h>
-	__isl_give isl_fixed_box *
-	isl_map_get_range_simple_fixed_box_hull(
-		__isl_keep isl_map *map);
-
-This function tries to approximate the range of the map by a box of fixed size.
-The box is described in terms of an offset living in the same space as
-the input map and a size living in the range space.  For any element
-in the input map, the range value is greater than or equal to
-the offset applied to the domain value and the difference with
-this offset is strictly smaller than the size.
-If no fixed-size approximation of the range can be found,
-an I<invalid> box is returned, i.e., one for which
-C<isl_fixed_box_is_valid> below returns false.
-
-The validity, the offset and the size of the box can be obtained using
-the following functions.
-
-	#include <isl/fixed_box.h>
-	isl_bool isl_fixed_box_is_valid(
-		__isl_keep isl_fixed_box *box);
-	__isl_give isl_multi_aff *isl_fixed_box_get_offset(
-		__isl_keep isl_fixed_box *box);
-	__isl_give isl_multi_val *isl_fixed_box_get_size(
-		__isl_keep isl_fixed_box *box);
-
-The box can be copied and freed using the following functions.
-
-	#include <isl/fixed_box.h>
-	__isl_give isl_fixed_box *isl_fixed_box_copy(
-		__isl_keep isl_fixed_box *box);
-	__isl_null isl_fixed_box *isl_fixed_box_free(
-		__isl_take isl_fixed_box *box);
-
 =item * Other approximations
 
 	#include <isl/set.h>
diff --git a/include/isl/ast.h b/include/isl/ast.h
index 96511ff8..0d88727b 100644
--- a/include/isl/ast.h
+++ b/include/isl/ast.h
@@ -3,7 +3,7 @@
 
 #include <isl/ctx.h>
 #include <isl/ast_type.h>
-#include <isl/id_type.h>
+#include <isl/id.h>
 #include <isl/id_to_ast_expr.h>
 #include <isl/val_type.h>
 #include <isl/list.h>
diff --git a/include/isl/constraint.h b/include/isl/constraint.h
index adb0d863..625d903a 100644
--- a/include/isl/constraint.h
+++ b/include/isl/constraint.h
@@ -11,7 +11,7 @@
 #define ISL_CONSTRAINT_H
 
 #include <isl/local_space.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/aff_type.h>
 #include <isl/set_type.h>
 #include <isl/list.h>
diff --git a/include/isl/fixed_box.h b/include/isl/fixed_box.h
deleted file mode 100644
index 5a40a6f0..00000000
--- a/include/isl/fixed_box.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Use of this software is governed by the MIT license
- */
-
-#ifndef ISL_FIXED_BOX_H
-#define ISL_FIXED_BOX_H
-
-#include <isl/ctx.h>
-#include <isl/val_type.h>
-#include <isl/space_type.h>
-#include <isl/aff_type.h>
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-struct isl_fixed_box;
-typedef struct isl_fixed_box isl_fixed_box;
-
-isl_ctx *isl_fixed_box_get_ctx(__isl_keep isl_fixed_box *box);
-__isl_give isl_space *isl_fixed_box_get_space(__isl_keep isl_fixed_box *box);
-isl_bool isl_fixed_box_is_valid(__isl_keep isl_fixed_box *box);
-__isl_give isl_multi_aff *isl_fixed_box_get_offset(
-	__isl_keep isl_fixed_box *box);
-__isl_give isl_multi_val *isl_fixed_box_get_size(__isl_keep isl_fixed_box *box);
-
-__isl_give isl_fixed_box *isl_fixed_box_copy(__isl_keep isl_fixed_box *box);
-__isl_null isl_fixed_box *isl_fixed_box_free(__isl_take isl_fixed_box *box);
-
-#if defined(__cplusplus)
-}
-#endif
-
-#endif
diff --git a/include/isl/id.h b/include/isl/id.h
index 33aa4b09..c025d513 100644
--- a/include/isl/id.h
+++ b/include/isl/id.h
@@ -2,7 +2,6 @@
 #define ISL_ID_H
 
 #include <isl/ctx.h>
-#include <isl/id_type.h>
 #include <isl/list.h>
 #include <isl/printer_type.h>
 #include <isl/stdint.h>
@@ -11,7 +10,10 @@
 extern "C" {
 #endif
 
-ISL_DECLARE_LIST_FN(id)
+struct isl_id;
+typedef struct isl_id isl_id;
+
+ISL_DECLARE_LIST(id)
 
 isl_ctx *isl_id_get_ctx(__isl_keep isl_id *id);
 uint32_t isl_id_get_hash(__isl_keep isl_id *id);
diff --git a/include/isl/id_to_ast_expr.h b/include/isl/id_to_ast_expr.h
index 5822241e..a160a9fc 100644
--- a/include/isl/id_to_ast_expr.h
+++ b/include/isl/id_to_ast_expr.h
@@ -1,7 +1,7 @@
 #ifndef ISL_ID_TO_AST_EXPR_H
 #define ISL_ID_TO_AST_EXPR_H
 
-#include <isl/id_type.h>
+#include <isl/id.h>
 #include <isl/ast_type.h>
 #include <isl/maybe_ast_expr.h>
 
diff --git a/include/isl/id_to_id.h b/include/isl/id_to_id.h
index 30901157..26bbc598 100644
--- a/include/isl/id_to_id.h
+++ b/include/isl/id_to_id.h
@@ -1,7 +1,7 @@
 #ifndef ISL_ID_TO_ID_H
 #define ISL_ID_TO_ID_H
 
-#include <isl/id_type.h>
+#include <isl/id.h>
 #include <isl/maybe_id.h>
 
 #define ISL_KEY		isl_id
diff --git a/include/isl/id_to_pw_aff.h b/include/isl/id_to_pw_aff.h
index bcbea660..081cc843 100644
--- a/include/isl/id_to_pw_aff.h
+++ b/include/isl/id_to_pw_aff.h
@@ -1,7 +1,7 @@
 #ifndef ISL_ID_TO_PW_AFF_H
 #define ISL_ID_TO_PW_AFF_H
 
-#include <isl/id_type.h>
+#include <isl/id.h>
 #include <isl/aff_type.h>
 #include <isl/maybe_pw_aff.h>
 
diff --git a/include/isl/id_type.h b/include/isl/id_type.h
deleted file mode 100644
index e87f8437..00000000
--- a/include/isl/id_type.h
+++ /dev/null
@@ -1,19 +0,0 @@
-#ifndef ISL_ID_TYPE_H
-#define ISL_ID_TYPE_H
-
-#include <isl/list.h>
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-struct isl_id;
-typedef struct isl_id isl_id;
-
-ISL_DECLARE_LIST_TYPE(id)
-
-#if defined(__cplusplus)
-}
-#endif
-
-#endif
diff --git a/include/isl/local_space.h b/include/isl/local_space.h
index a7201b05..d0fc960b 100644
--- a/include/isl/local_space.h
+++ b/include/isl/local_space.h
@@ -2,7 +2,7 @@
 #define ISL_LOCAL_SPACE_H
 
 #include <isl/aff_type.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/printer.h>
 #include <isl/map_type.h>
 
diff --git a/include/isl/map.h b/include/isl/map.h
index 8b05ba9d..ae8f9195 100644
--- a/include/isl/map.h
+++ b/include/isl/map.h
@@ -13,7 +13,7 @@
 #include <stdio.h>
 
 #include <isl/ctx.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/vec.h>
 #include <isl/mat.h>
 #include <isl/printer.h>
@@ -24,7 +24,6 @@
 #include <isl/val_type.h>
 #include <isl/stdint.h>
 #include <isl/stride_info.h>
-#include <isl/fixed_box.h>
 
 #if defined(__cplusplus)
 extern "C" {
@@ -608,8 +607,6 @@ __isl_give isl_map *isl_map_gist_basic_map(__isl_take isl_map *map,
 
 __isl_give isl_stride_info *isl_map_get_range_stride_info(
 	__isl_keep isl_map *map, int pos);
-__isl_give isl_fixed_box *isl_map_get_range_simple_fixed_box_hull(
-	__isl_keep isl_map *map);
 
 __isl_export
 __isl_give isl_map *isl_map_coalesce(__isl_take isl_map *map);
diff --git a/include/isl/multi.h b/include/isl/multi.h
index f643f9e7..c344cc40 100644
--- a/include/isl/multi.h
+++ b/include/isl/multi.h
@@ -2,7 +2,7 @@
 #define ISL_MULTI_H
 
 #include <isl/val_type.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/list.h>
 #include <isl/set_type.h>
 
diff --git a/include/isl/point.h b/include/isl/point.h
index 1dddc628..bc1b976d 100644
--- a/include/isl/point.h
+++ b/include/isl/point.h
@@ -2,7 +2,7 @@
 #define ISL_POINT_H
 
 #include <stdio.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/val_type.h>
 
 #if defined(__cplusplus)
diff --git a/include/isl/polynomial.h b/include/isl/polynomial.h
index 8f478c00..cfa75eab 100644
--- a/include/isl/polynomial.h
+++ b/include/isl/polynomial.h
@@ -3,7 +3,7 @@
 
 #include <isl/ctx.h>
 #include <isl/constraint.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/set_type.h>
 #include <isl/point.h>
 #include <isl/printer.h>
diff --git a/include/isl/printer.h b/include/isl/printer.h
index c3159546..dd50e917 100644
--- a/include/isl/printer.h
+++ b/include/isl/printer.h
@@ -4,7 +4,7 @@
 #include <stdio.h>
 #include <isl/ctx.h>
 #include <isl/printer_type.h>
-#include <isl/id_type.h>
+#include <isl/id.h>
 
 #if defined(__cplusplus)
 extern "C" {
diff --git a/include/isl/schedule.h b/include/isl/schedule.h
index 4c5de1bf..b74d5ac6 100644
--- a/include/isl/schedule.h
+++ b/include/isl/schedule.h
@@ -5,7 +5,7 @@
 #include <isl/union_map_type.h>
 #include <isl/schedule_type.h>
 #include <isl/aff_type.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/set_type.h>
 #include <isl/list.h>
 #include <isl/printer_type.h>
diff --git a/include/isl/schedule_node.h b/include/isl/schedule_node.h
index 1ad55152..3a058edc 100644
--- a/include/isl/schedule_node.h
+++ b/include/isl/schedule_node.h
@@ -6,7 +6,7 @@
 #include <isl/aff_type.h>
 #include <isl/ast_type.h>
 #include <isl/val_type.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 
 #if defined(__cplusplus)
 extern "C" {
diff --git a/include/isl/set.h b/include/isl/set.h
index 29fb84e9..90acf9cb 100644
--- a/include/isl/set.h
+++ b/include/isl/set.h
@@ -10,7 +10,6 @@
 #ifndef ISL_SET_H
 #define ISL_SET_H
 
-#include <isl/id_type.h>
 #include <isl/map_type.h>
 #include <isl/aff_type.h>
 #include <isl/list.h>
diff --git a/include/isl/space.h b/include/isl/space.h
index deb592b8..e7f959be 100644
--- a/include/isl/space.h
+++ b/include/isl/space.h
@@ -11,14 +11,26 @@
 #define ISL_SPACE_H
 
 #include <isl/ctx.h>
-#include <isl/space_type.h>
-#include <isl/id_type.h>
+#include <isl/id.h>
 #include <isl/printer.h>
 
 #if defined(__cplusplus)
 extern "C" {
 #endif
 
+struct isl_space;
+typedef struct isl_space isl_space;
+
+enum isl_dim_type {
+	isl_dim_cst,
+	isl_dim_param,
+	isl_dim_in,
+	isl_dim_out,
+	isl_dim_set = isl_dim_out,
+	isl_dim_div,
+	isl_dim_all
+};
+
 isl_ctx *isl_space_get_ctx(__isl_keep isl_space *dim);
 __isl_give isl_space *isl_space_alloc(isl_ctx *ctx,
 			unsigned nparam, unsigned n_in, unsigned n_out);
diff --git a/include/isl/space_type.h b/include/isl/space_type.h
deleted file mode 100644
index 6a181555..00000000
--- a/include/isl/space_type.h
+++ /dev/null
@@ -1,25 +0,0 @@
-#ifndef ISL_SPACE_TYPE_H
-#define ISL_SPACE_TYPE_H
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-struct isl_space;
-typedef struct isl_space isl_space;
-
-enum isl_dim_type {
-	isl_dim_cst,
-	isl_dim_param,
-	isl_dim_in,
-	isl_dim_out,
-	isl_dim_set = isl_dim_out,
-	isl_dim_div,
-	isl_dim_all
-};
-
-#if defined(__cplusplus)
-}
-#endif
-
-#endif
diff --git a/include/isl/union_map.h b/include/isl/union_map.h
index 18db9af4..e12f61db 100644
--- a/include/isl/union_map.h
+++ b/include/isl/union_map.h
@@ -2,7 +2,7 @@
 #define ISL_UNION_MAP_H
 
 #include <isl/stdint.h>
-#include <isl/space_type.h>
+#include <isl/space.h>
 #include <isl/aff_type.h>
 #include <isl/map_type.h>
 #include <isl/union_map_type.h>
diff --git a/isl_box.c b/isl_box.c
deleted file mode 100644
index b90ef869..00000000
--- a/isl_box.c
+++ /dev/null
@@ -1,368 +0,0 @@
-/*
- * Copyright 2010-2011 INRIA Saclay
- * Copyright 2012-2013 Ecole Normale Superieure
- *
- * Use of this software is governed by the MIT license
- *
- * Written by Sven Verdoolaege, INRIA Saclay - Ile-de-France,
- * Parc Club Orsay Universite, ZAC des vignes, 4 rue Jacques Monod,
- * 91893 Orsay, France
- * and Ecole Normale Superieure, 45 rue d'Ulm, 75230 Paris, France
- */
-
-#include <isl/val.h>
-#include <isl/space.h>
-#include <isl_map_private.h>
-#include <isl_aff_private.h>
-#include <isl/constraint.h>
-#include <isl/ilp.h>
-#include <isl/fixed_box.h>
-
-/* Representation of a box of fixed size containing the elements
- * [offset, offset + size).
- * "size" lives in the target space of "offset".
- *
- * If any of the "offsets" is NaN, then the object represents
- * the failure of finding a fixed-size box.
- */
-struct isl_fixed_box {
-	isl_multi_aff *offset;
-	isl_multi_val *size;
-};
-
-/* Free "box" and return NULL.
- */
-__isl_null isl_fixed_box *isl_fixed_box_free(__isl_take isl_fixed_box *box)
-{
-	if (!box)
-		return NULL;
-	isl_multi_aff_free(box->offset);
-	isl_multi_val_free(box->size);
-	free(box);
-	return NULL;
-}
-
-/* Construct an isl_fixed_box with the given offset and size.
- */
-static __isl_give isl_fixed_box *isl_fixed_box_alloc(
-	__isl_take isl_multi_aff *offset, __isl_take isl_multi_val *size)
-{
-	isl_ctx *ctx;
-	isl_fixed_box *box;
-
-	if (!offset || !size)
-		goto error;
-	ctx = isl_multi_aff_get_ctx(offset);
-	box = isl_alloc_type(ctx, struct isl_fixed_box);
-	if (!box)
-		goto error;
-	box->offset = offset;
-	box->size = size;
-
-	return box;
-error:
-	isl_multi_aff_free(offset);
-	isl_multi_val_free(size);
-	return NULL;
-}
-
-/* Construct an initial isl_fixed_box with zero offsets
- * in the given space and zero corresponding sizes.
- */
-static __isl_give isl_fixed_box *isl_fixed_box_init(
-	__isl_take isl_space *space)
-{
-	isl_multi_aff *offset;
-	isl_multi_val *size;
-
-	offset = isl_multi_aff_zero(isl_space_copy(space));
-	size = isl_multi_val_zero(isl_space_range(space));
-	return isl_fixed_box_alloc(offset, size);
-}
-
-/* Return a copy of "box".
- */
-__isl_give isl_fixed_box *isl_fixed_box_copy(__isl_keep isl_fixed_box *box)
-{
-	isl_multi_aff *offset;
-	isl_multi_val *size;
-
-	offset = isl_fixed_box_get_offset(box);
-	size = isl_fixed_box_get_size(box);
-	return isl_fixed_box_alloc(offset, size);
-}
-
-/* Replace the offset and size in direction "pos" by "offset" and "size"
- * (without checking whether "box" is a valid box).
- */
-static __isl_give isl_fixed_box *isl_fixed_box_set_extent(
-	__isl_take isl_fixed_box *box, int pos, __isl_keep isl_aff *offset,
-	__isl_keep isl_val *size)
-{
-	if (!box)
-		return NULL;
-	box->offset = isl_multi_aff_set_aff(box->offset, pos,
-							isl_aff_copy(offset));
-	box->size = isl_multi_val_set_val(box->size, pos, isl_val_copy(size));
-	if (!box->offset || !box->size)
-		return isl_fixed_box_free(box);
-	return box;
-}
-
-/* Replace the offset and size in direction "pos" by "offset" and "size",
- * if "box" is a valid box.
- */
-static __isl_give isl_fixed_box *isl_fixed_box_set_valid_extent(
-	__isl_take isl_fixed_box *box, int pos, __isl_keep isl_aff *offset,
-	__isl_keep isl_val *size)
-{
-	isl_bool valid;
-
-	valid = isl_fixed_box_is_valid(box);
-	if (valid < 0 || !valid)
-		return box;
-	return isl_fixed_box_set_extent(box, pos, offset, size);
-}
-
-/* Replace "box" by an invalid box, by setting all offsets to NaN
- * (and all sizes to infinity).
- */
-static __isl_give isl_fixed_box *isl_fixed_box_invalidate(
-	__isl_take isl_fixed_box *box)
-{
-	int i, n;
-	isl_space *space;
-	isl_val *infty;
-	isl_aff *nan;
-
-	if (!box)
-		return NULL;
-	n = isl_multi_val_dim(box->size, isl_dim_set);
-
-	infty = isl_val_infty(isl_fixed_box_get_ctx(box));
-	space = isl_space_domain(isl_fixed_box_get_space(box));
-	nan = isl_aff_nan_on_domain(isl_local_space_from_space(space));
-	for (i = 0; i < n; ++i)
-		box = isl_fixed_box_set_extent(box, i, nan, infty);
-	isl_aff_free(nan);
-	isl_val_free(infty);
-
-	if (!box->offset || !box->size)
-		return isl_fixed_box_free(box);
-	return box;
-}
-
-/* Return the isl_ctx to which "box" belongs.
- */
-isl_ctx *isl_fixed_box_get_ctx(__isl_keep isl_fixed_box *box)
-{
-	if (!box)
-		return NULL;
-	return isl_multi_aff_get_ctx(box->offset);
-}
-
-/* Return the space in which "box" lives.
- */
-__isl_give isl_space *isl_fixed_box_get_space(__isl_keep isl_fixed_box *box)
-{
-	if (!box)
-		return NULL;
-	return isl_multi_aff_get_space(box->offset);
-}
-
-/* Does "box" contain valid information?
- */
-isl_bool isl_fixed_box_is_valid(__isl_keep isl_fixed_box *box)
-{
-	if (!box)
-		return isl_bool_error;
-	return isl_bool_not(isl_multi_aff_involves_nan(box->offset));
-}
-
-/* Return the offsets of the box "box".
- */
-__isl_give isl_multi_aff *isl_fixed_box_get_offset(
-	__isl_keep isl_fixed_box *box)
-{
-	if (!box)
-		return NULL;
-	return isl_multi_aff_copy(box->offset);
-}
-
-/* Return the sizes of the box "box".
- */
-__isl_give isl_multi_val *isl_fixed_box_get_size(__isl_keep isl_fixed_box *box)
-{
-	if (!box)
-		return NULL;
-	return isl_multi_val_copy(box->size);
-}
-
-/* Data used in set_dim_extent and compute_size_in_direction.
- *
- * "bset" is a wrapped copy of the basic map that has the selected
- * output dimension as range.
- * "pos" is the position of the variable representing the output dimension,
- * i.e., the variable for which the size should be computed.  This variable
- * is also the last variable in "bset".
- * "size" is the best size found so far
- * (infinity if no offset was found so far).
- * "offset" is the offset corresponding to the best size
- * (NULL if no offset was found so far).
- */
-struct isl_size_info {
-	isl_basic_set *bset;
-	int pos;
-	isl_val *size;
-	isl_aff *offset;
-};
-
-/* Is "c" a suitable bound on dimension "pos" for use as a lower bound
- * of a fixed-size range.
- * In particular, it needs to be a lower bound on "pos".
- * In order for the final offset not to be too complicated,
- * the constraint itself should also not involve any integer divisions.
- */
-static isl_bool is_suitable_bound(__isl_keep isl_constraint *c, unsigned pos)
-{
-	unsigned n_div;
-	isl_bool is_bound, any_divs;
-
-	is_bound = isl_constraint_is_lower_bound(c, isl_dim_set, pos);
-	if (is_bound < 0 || !is_bound)
-		return is_bound;
-
-	n_div = isl_constraint_dim(c, isl_dim_div);
-	any_divs = isl_constraint_involves_dims(c, isl_dim_div, 0, n_div);
-	return isl_bool_not(any_divs);
-}
-
-/* Given a constraint from the basic set describing the bounds on
- * an array index, check if it is a lower bound, say m i >= b(x), and,
- * if so, check whether the expression "i - ceil(b(x)/m) + 1" has a constant
- * upper bound.  If so, and if this bound is smaller than any bound
- * derived from earlier constraints, set the size to this bound on
- * the expression and the lower bound to ceil(b(x)/m).
- */
-static isl_stat compute_size_in_direction(__isl_take isl_constraint *c,
-	void *user)
-{
-	struct isl_size_info *info = user;
-	isl_val *v;
-	isl_aff *aff;
-	isl_aff *lb;
-	isl_bool is_bound, better;
-
-	is_bound = is_suitable_bound(c, info->pos);
-	if (is_bound < 0 || !is_bound) {
-		isl_constraint_free(c);
-		return is_bound < 0 ? isl_stat_error : isl_stat_ok;
-	}
-
-	aff = isl_constraint_get_bound(c, isl_dim_set, info->pos);
-	aff = isl_aff_ceil(aff);
-
-	lb = isl_aff_copy(aff);
-
-	aff = isl_aff_neg(aff);
-	aff = isl_aff_add_coefficient_si(aff, isl_dim_in, info->pos, 1);
-
-	v = isl_basic_set_max_val(info->bset, aff);
-	isl_aff_free(aff);
-
-	v = isl_val_add_ui(v, 1);
-	better = isl_val_lt(v, info->size);
-	if (better >= 0 && better) {
-		isl_val_free(info->size);
-		info->size = isl_val_copy(v);
-		lb = isl_aff_domain_factor_domain(lb);
-		isl_aff_free(info->offset);
-		info->offset = isl_aff_copy(lb);
-	}
-	isl_val_free(v);
-	isl_aff_free(lb);
-
-	isl_constraint_free(c);
-
-	return better < 0 ? isl_stat_error : isl_stat_ok;
-}
-
-/* Look for a fixed-size range of values for the output dimension "pos"
- * of "map", by looking for a lower-bound expression in the parameters
- * and input dimensions such that the range of the output dimension
- * is a constant shifted by this expression.
- *
- * In particular, look through the explicit lower bounds on the output dimension
- * for candidate expressions and pick the one that results in the smallest size.
- * Initialize the size with infinity and if no better size is found
- * then invalidate the box.  Otherwise, set the offset and size
- * in the given direction by those that correspond to the smallest size.
- */
-static __isl_give isl_fixed_box *set_dim_extent(__isl_take isl_fixed_box *box,
-	__isl_keep isl_map *map, int pos)
-{
-	struct isl_size_info info;
-	isl_bool valid;
-	isl_ctx *ctx;
-
-	if (!box || !map)
-		return isl_fixed_box_free(box);
-
-	ctx = isl_map_get_ctx(map);
-	map = isl_map_copy(map);
-	map = isl_map_project_onto(map, isl_dim_out, pos, 1);
-	map = isl_map_compute_divs(map);
-	info.size = isl_val_infty(ctx);
-	info.offset = NULL;
-	info.pos = isl_map_dim(map, isl_dim_in);
-	info.bset = isl_basic_map_wrap(isl_map_simple_hull(map));
-	if (isl_basic_set_foreach_constraint(info.bset,
-					&compute_size_in_direction, &info) < 0)
-		box = isl_fixed_box_free(box);
-	valid = isl_val_is_int(info.size);
-	if (valid < 0)
-		box = isl_fixed_box_free(box);
-	else if (valid)
-		box = isl_fixed_box_set_valid_extent(box, pos,
-						     info.offset, info.size);
-	else
-		box = isl_fixed_box_invalidate(box);
-	isl_val_free(info.size);
-	isl_aff_free(info.offset);
-	isl_basic_set_free(info.bset);
-
-	return box;
-}
-
-/* Try and construct a fixed-size rectangular box with an offset
- * in terms of the domain of "map" that contains the range of "map".
- * If no such box can be constructed, then return an invalidated box,
- * i.e., one where isl_fixed_box_is_valid returns false.
- *
- * Iterate over the dimensions in the range
- * setting the corresponding offset and extent.
- */
-__isl_give isl_fixed_box *isl_map_get_range_simple_fixed_box_hull(
-	__isl_keep isl_map *map)
-{
-	int i, n;
-	isl_space *space;
-	isl_fixed_box *box;
-
-	n = isl_map_dim(map, isl_dim_out);
-	space = isl_map_get_space(map);
-	box = isl_fixed_box_init(space);
-
-	map = isl_map_detect_equalities(isl_map_copy(map));
-	for (i = 0; i < n; ++i) {
-		isl_bool valid;
-
-		box = set_dim_extent(box, map, i);
-		valid = isl_fixed_box_is_valid(box);
-		if (valid < 0 || !valid)
-			break;
-	}
-	isl_map_free(map);
-
-	return box;
-}
diff --git a/isl_space_private.h b/isl_space_private.h
index 141d8357..5246429d 100644
--- a/isl_space_private.h
+++ b/isl_space_private.h
@@ -3,7 +3,7 @@
 
 #include <isl/space.h>
 #include <isl/hash.h>
-#include <isl/id_type.h>
+#include <isl/id.h>
 
 struct isl_name;
 struct isl_space {
-- 
2.16.2

